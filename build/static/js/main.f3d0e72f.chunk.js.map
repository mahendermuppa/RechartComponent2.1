{"version":3,"sources":["TwoSimplePieChart.js","App.js","serviceWorker.js","index.js"],"names":["dataGreen","name","value","COLORSGreen","dataRed","COLORSRed","dataOrange","COLORSOrange","dataWhite","COLORSWhite","TwoSimplePieChart","shoot","a","alert","className","width","height","stroke","data","cx","cy","labelLine","innerRadius","outerRadius","fill","textAnchor","paddingAngle","margin","map","entry","index","length","class","onClick","this","bind","InfoSharp","NotificationsSharp","src","WatchLater","DoneSharp","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3d0e72f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { PieChart, Pie, Cell } from 'recharts';\r\nimport { InfoSharp, DoneSharp, NotificationsSharp, WatchLater } from '@material-ui/icons';\r\nimport './Style.css';\r\n\r\n\r\nconst dataGreen = [{ name: 'name', value: 100 }, { name: 'other', value: 0 }];\r\nconst COLORSGreen = ['#90ee90', '#ffffff'];\r\n\r\nconst dataRed = [{ name: 'name', value: 20 }, { name: 'other', value: 80 }];\r\nconst COLORSRed = ['#f92f2f', '#ffffff'];\r\n\r\nconst dataOrange = [{ name: 'name', value: 75 }, { name: 'other', value: 25 }];\r\nconst COLORSOrange = ['#ffa500', '#ffffff'];\r\n\r\nconst dataWhite = [{ name: 'name', value: 0 }, { name: 'other', value: 100 }];\r\nconst COLORSWhite = ['#ffffff', '#ffffff'];\r\n\r\n\r\nclass TwoSimplePieChart extends React.Component {\r\n    shoot = (a) => {\r\n        alert(a);\r\n      };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* Green */}\r\n                <div className=\"mainCls\">\r\n                    <PieChart width={80} height={80}>\r\n                        <Pie\r\n                            stroke=\"none\"\r\n                            data={dataGreen}\r\n                            cx={35}\r\n                            cy={35}\r\n                            labelLine={false}\r\n                            innerRadius={30}\r\n                            outerRadius={33}\r\n                            fill=\"#ffffff\"\r\n                            textAnchor='end'\r\n                            paddingAngle={0}\r\n                            margin={0}\r\n                        >\r\n                            {\r\n                                dataGreen.map((entry, index) => <Cell fill={COLORSGreen[index % COLORSGreen.length]} />)\r\n                            }\r\n                        </Pie>\r\n\r\n                    </PieChart>\r\n                    <div class=\"label\">\r\n                        <div class=\"icon green\" onClick={this.shoot.bind(this, \"24 hrs |Excellant\")}>\r\n                            <div class=\"valueText\">\r\n                                <div class=\"value\">24</div>\r\n                                <div class=\"name\">hrs</div>\r\n                            </div>\r\n                            <span class=\"infoIcon\">\r\n                                <InfoSharp></InfoSharp>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"pieTitle\">\r\n                        Excellent\r\n                    </div>\r\n            </div>\r\n\r\n                {/* Orange */}\r\n            <div className=\"mainCls\">\r\n                    <PieChart width={80} height={80}>\r\n                        <Pie\r\n                            stroke=\"none\"\r\n                            data={dataOrange}\r\n                            cx={35}\r\n                            cy={35}\r\n                            labelLine={false}\r\n                            innerRadius={30}\r\n                            outerRadius={33}\r\n                            fill=\"#ffffff\"\r\n                            textAnchor='end'\r\n                            paddingAngle={0}\r\n                            margin={0}\r\n                        >\r\n                            {\r\n                                dataOrange.map((entry, index) => <Cell fill={COLORSOrange[index % COLORSOrange.length]} />)\r\n                            }\r\n                        </Pie>\r\n\r\n                    </PieChart>\r\n                    <div class=\"label\">\r\n                        <div class=\"icon orange\" onClick={this.shoot.bind(this, \"18 hrs |Good\")}>\r\n                            <div class=\"valueText\">\r\n                                <div class=\"value\">18</div>\r\n                                <div class=\"name\">hrs</div>\r\n                            </div>\r\n                            <span class=\"NotificationsSharpIcon\">\r\n                                <NotificationsSharp></NotificationsSharp>\r\n                            </span>\r\n                            <span class=\"spiral-icon\">\r\n                               <img src=\"images/spiral.gif\" />\r\n                            </span>\r\n                            <span class=\"infoIcon\">\r\n                                <InfoSharp></InfoSharp>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"pieTitle\">\r\n                        Good\r\n                    </div>\r\n            </div>\r\n                {/* red */}\r\n            <div className=\"mainCls\">\r\n                    <PieChart width={80} height={80}>\r\n                        <Pie\r\n                            stroke=\"none\"\r\n                            data={dataRed}\r\n                            cx={35}\r\n                            cy={35}\r\n                            labelLine={false}\r\n                            innerRadius={30}\r\n                            outerRadius={33}\r\n                            fill=\"#ffffff\"\r\n                            textAnchor='end'\r\n                            paddingAngle={0}\r\n                            margin={0}\r\n                        >\r\n                            {\r\n                                dataRed.map((entry, index) => <Cell fill={COLORSRed[index % COLORSRed.length]} />)\r\n                            }\r\n                        </Pie>\r\n\r\n                    </PieChart>\r\n                    <div class=\"label\">\r\n                        <div class=\"icon red\" onClick={this.shoot.bind(this, \"Poor Performance\")}>\r\n                            <div class=\"valueText\">\r\n                                {/* <div class=\"value\">6</div>\r\n                                <div class=\"name\">hrs</div> */}\r\n                                {/* <DoneSharp></DoneSharp>\r\n                                <InfoSharp></InfoSharp>\r\n                                <NotificationsSharp></NotificationsSharp>\r\n                                <AccessTimeSharp></AccessTimeSharp> */}\r\n                                <WatchLater className=\"watchLaterIcon\"></WatchLater>\r\n                            </div>\r\n                            <span class=\"infoIcon\">\r\n                                <InfoSharp></InfoSharp>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"pieTitle\">\r\n                        Poor\r\n                    </div>\r\n            </div>\r\n                {/* White */}\r\n            <div className=\"mainCls\">\r\n                    <PieChart width={80} height={80}>\r\n                        <Pie\r\n                            stroke=\"none\"\r\n                            data={dataWhite}\r\n                            cx={35}\r\n                            cy={35}\r\n                            labelLine={false}\r\n                            innerRadius={30}\r\n                            outerRadius={33}\r\n                            fill=\"#ffffff\"\r\n                            textAnchor='end'\r\n                            paddingAngle={0}\r\n                            margin={0}\r\n                        >\r\n                            {\r\n                                dataWhite.map((entry, index) => <Cell fill={COLORSWhite[index % COLORSWhite.length]} />)\r\n                            }\r\n                        </Pie>\r\n\r\n                    </PieChart>\r\n                    <div class=\"label\">\r\n                        <div class=\"icon green\" onClick={this.shoot.bind(this, \"All Green Excellant\")}>\r\n                            <div class=\"valueText\">\r\n                                {/* <div class=\"value fontBlack\">0</div>\r\n                                <div class=\"name fontBlack\">hrs</div> */}\r\n                                <DoneSharp className=\"DoneSharpIcon fontColorWhite\"></DoneSharp>\r\n                            </div>\r\n                            <span class=\"infoIcon\">\r\n                                <InfoSharp></InfoSharp>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"pieTitle\">\r\n                        {/* <Home></Home> */}\r\n                        Checked\r\n                    </div>\r\n            </div>\r\n             {/* Orange */}\r\n            <div className=\"mainCls\">\r\n                    <PieChart width={80} height={80}>\r\n                        <Pie\r\n                            stroke=\"none\"\r\n                            data={dataOrange}\r\n                            cx={35}\r\n                            cy={35}\r\n                            labelLine={false}\r\n                            innerRadius={30}\r\n                            outerRadius={33}\r\n                            fill=\"#ffffff\"\r\n                            textAnchor='end'\r\n                            paddingAngle={0}\r\n                            margin={0}\r\n                        >\r\n                            {\r\n                                dataOrange.map((entry, index) => <Cell fill={COLORSOrange[index % COLORSOrange.length]} />)\r\n                            }\r\n                        </Pie>\r\n\r\n                    </PieChart>\r\n                    <div class=\"label\">\r\n                        <div class=\"icon orange\" onClick={this.shoot.bind(this, \"6 Days\")}>\r\n                            <div class=\"valueText daysTextAlign\">\r\n                                <div class=\"value\">6</div>\r\n                                <div class=\"name\">days</div>\r\n                            </div>\r\n                            {/* <span class=\"NotificationsSharpIcon\">\r\n                                <NotificationsSharp></NotificationsSharp>\r\n                            </span> */}\r\n                            <span class=\"infoIcon\">\r\n                                <InfoSharp></InfoSharp>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"pieTitle\">\r\n                        Good\r\n                    </div>\r\n            </div>\r\n\r\n        </div>);\r\n    }\r\n}\r\nexport default TwoSimplePieChart;","import React from 'react';\nimport TwoSimplePieChart from './TwoSimplePieChart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TwoSimplePieChart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}